<?xml version='1.0' encoding='utf-8'?>
<snippets language="cpp">
  <snippet override="cpp-beginend">
    <text><![CDATA[${1:v}.begin(), ${1:v}.end()]]></text>
    <description>beginend</description>
    <tag>all</tag>
  </snippet>
  <snippet override="cpp-do">
    <text><![CDATA[do {
  $0
} while (${1:condition});]]></text>
    <description>do .. while</description>
    <tag>do</tag>
  </snippet>
  <snippet override="cpp-for">
    <text><![CDATA[for (${1:int} ${2:i} = ${3:0}; ${2:i} < ${4:n}; ${2:i}${5:++}) {
  $0
}]]></text>
    <description>for loop</description>
    <tag>for</tag>
  </snippet>
  <snippet override="cpp-if">
    <text><![CDATA[if (${1:condition}) {
  $0
}]]></text>
    <description>if ..</description>
    <tag>if</tag>
  </snippet>
  <snippet override="cpp-inc">
    <text><![CDATA[#include "${1:file}"]]></text>
    <description>#include ".."</description>
    <tag>Inc</tag>
  </snippet>
  <snippet override="cpp-endif">
    <text><![CDATA[#endif]]></text>
    <accelerator><![CDATA[<Primary><Alt>period]]></accelerator>
    <description>#endif</description>
  </snippet>
  <snippet override="cpp-Inc">
    <text><![CDATA[#include <${1:file}>]]></text>
    <description>#include &lt;..&gt;</description>
    <tag>inc</tag>
  </snippet>
  <snippet override="cpp-main">
    <text><![CDATA[int main() {
  $0
  return 0;
}]]></text>
    <description>main</description>
    <tag>main</tag>
  </snippet>
  <snippet override="cpp-namespace">
    <text><![CDATA[namespace ${1:ns} {
  $0
}]]></text>
    <description>namespace ..</description>
    <tag>ns</tag>
  </snippet>
  <snippet override="cpp-map">
    <text><![CDATA[map<${1:key}, ${2:value}> ${3:m};]]></text>
    <description>std::map</description>
    <tag>map</tag>
  </snippet>
  <snippet override="cpp-vector">
    <text><![CDATA[vector<${1:type}> ${2:v};]]></text>
    <description>std::vector</description>
    <tag>vv</tag>
  </snippet>
  <snippet override="cpp-struct">
    <text><![CDATA[struct ${1:name} {

  ${0:/* data */}
};]]></text>
    <description>struct ..</description>
    <tag>st</tag>
  </snippet>
  <snippet override="cpp-template">
    <text><![CDATA[template <typename ${1:T}>]]></text>
    <description>template &lt;typename ..&gt;</description>
    <tag>tmpl</tag>
  </snippet>
  <snippet override="cpp-td">
    <text><![CDATA[typedef ${1:type} ${2:new_type};]]></text>
    <tag>td</tag>
    <description>typedef</description>
  </snippet>
  <snippet override="cpp-while">
    <text><![CDATA[while (${1:condition}) {
  $0
}]]></text>
    <tag>whi</tag>
    <description>while</description>
  </snippet>
  <snippet override="cpp-readfile">
    <text><![CDATA[std::ifstream fin("${1:filename}", std::ios_base::ate);
std::string ${2:content};
if (fin.good()) {
  const int length = fin.tellg();
  fin.seekg(0, std::ios_base::beg);
  char* const buffer = new char[length];
  fin.read(buffer, length);
  ${2:content}.assign(buffer);
  delete[] buffer;
  fin.close();
}]]></text>
    <description>Read File into String</description>
    <tag>readfile</tag>
  </snippet>
  <snippet>
    <tag>code</tag>
    <text><![CDATA[#include <bits/stdc++.h>

using namespace std;

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(nullptr);
  cout.tie(nullptr);
  int test_cases;
  cin >> test_cases;
  while (test_cases-- > 0) {
    int n;
    cin >> n;
    $0
  }
  return 0;
}
]]></text>
    <description>Competitive Code</description>
  </snippet>
  <snippet>
    <tag>elif</tag>
    <text><![CDATA[else if (${1:condition}) {
  $0
}]]></text>
    <description>else if</description>
  </snippet>
  <snippet override="cpp-gpl">
    <text><![CDATA[/**
 * ${1:[$GEDIT_CURRENT_DOCUMENT_NAME,<filename>]}
 * This file is part of ${2:<program name>}
 *
 * Copyright (C) $<3: import datetime; return str(datetime.date.today().year)> - $<4:
import pwd, os
try:
  return pwd.getpwuid(os.getuid()).pw_gecos.split(',')[0]
except KeyError:
  return '<author\>' >
 *
 * ${2} is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * ${2} is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ${2}. If not, see <http://www.gnu.org/licenses/>.
**/
$0]]></text>
    <tag>gpl</tag>
    <description>GPL License</description>
  </snippet>
  <snippet override="cpp-lgpl">
    <text><![CDATA[/**
 * ${1:[$GEDIT_CURRENT_DOCUMENT_NAME,<filename>]}
 * This file is part of ${2:<library name>}
 *
 * Copyright (C) $<3: import datetime; return str(datetime.date.today().year)> - $<4:
import pwd, os
try:
  return pwd.getpwuid(os.getuid()).pw_gecos.split(',')[0]
except KeyError:
  return '<author\>' >
 *
 * ${2} is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * ${2} is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with ${2}. If not, see <http://www.gnu.org/licenses/>.
**/
$0]]></text>
    <tag>lgpl</tag>
    <description>LGPL License</description>
  </snippet>
  <snippet>
    <tag>modulo</tag>
    <text><![CDATA[const int64_t MOD = static_cast<int64_t>(1e9 + 7);

inline int64_t add(int64_t a, const int64_t b, const int64_t M = MOD) {
  return ((a += b) >= M ? a - M : a);
}

inline int64_t sub(int64_t a, const int64_t b, const int64_t M = MOD) {
  return ((a -= b) < 0 ? a + M : a);
}

inline int64_t mul(const int64_t a, const int64_t b, const int64_t M = MOD) {
  return a * b % M;
}

inline int64_t power(int64_t a, int64_t b, const int64_t M = MOD) {
  assert(b >= 0);
  int64_t ans = 1;
  while (b != 0) {
    if ((b & 1) == 1) {
      ans = mul(ans, a, M);
    }
    a = mul(a, a, M);
    b >>= 1;
  }
  return ans;
}

inline int64_t inverse(int64_t a, const int64_t M = MOD) {
  int64_t b = M, u = 0, v = 1;
  while (a != 0) {
    const int64_t t = b / a;
    b -= t * a; swap(a, b);
    u -= t * v; swap(u, v);
  }
  assert(b == 1);
  return sub(u, 0, M);
}]]></text>
    <description>Modular Arithmetic</description>
  </snippet>
  <snippet>
    <tag>debug</tag>
    <text><![CDATA[#ifdef LOCAL
#include "competitive-programming/utility/debug.hpp"
#else
#define debug(...)
#endif]]></text>
    <description>Debug</description>
  </snippet>
  <snippet>
    <tag>dsu</tag>
    <text><![CDATA[class dsu {

private:

  const size_t n;

  int components;
  vector<int> p, sz;

public:

  inline dsu(const size_t _n) : n(_n), components(_n), p(_n), sz(_n, 1) {
    iota(p.begin(), p.end(), 0);
  }

  inline size_t size() const {
    return n;
  }

  inline int get_components() const {
    return components;
  }

  inline int get_parent(const int x) {
    return (x == p[x] ? x : (p[x] = get_parent(p[x])));
  }

  inline void unite(int x, int y) {
    if ((x = get_parent(x)) != (y = get_parent(y))) {
      if (sz[x] < sz[y]) {
        swap(x, y);
      }
      p[y] = x;
      sz[x] += sz[y];
      components--;
    }
  }

  inline int get_size(const int x) {
    return sz[get_parent(x)];
  }
};]]></text>
    <description>Disjoint Set Union</description>
  </snippet>
  <snippet>
    <tag>cl</tag>
    <text><![CDATA[class ${1:name} {

public:

  ${0:/* data */}
};]]></text>
    <description>class ..</description>
  </snippet>
  <snippet>
    <tag>fenwick</tag>
    <text><![CDATA[template <typename T>
class fenwick_tree {

private:

  const size_t n;
  const function<T(const T, const T)> unite;
  const T DEFAULT;

  vector<T> fenw;

public:

  inline fenwick_tree(const size_t _n,
                      const function<T(const T, const T)> &_unite = plus<T>(),
                      const T _default = 0) : n(_n),
                                              unite(_unite),
                                              DEFAULT(_default),
                                              fenw(_n, _default) {}

  template <typename A>
  inline fenwick_tree(const vector<A> &a,
                      const function<T(const T, const T)> &_unite = plus<T>(),
                      const T _default = 0) : fenwick_tree(a.size(), _unite, _default) {
    for (int i = 0; i < (int) n; i++) {
      update(i, a[i]);
    }
  }

  inline void update(int x, const T delta) {
    while (x < (int) n) {
      fenw[x] += delta;
      x |= x + 1;
    }
  }

  inline size_t size() const {
    return n;
  }

  inline T query(int x) const {
    T res = DEFAULT;
    while (x >= 0) {
      res += fenw[x];
      x = (x & (x + 1)) - 1;
    }
    return res;
  }

  inline T query(const int l, const int r) const {
    return query(r) - query(l - 1);
  }

  inline int order_of_key(const T val) const {
    return (val == 0 ? 0 : (int) query(val - 1));
  }

  inline T find_by_order(const int pos) const {
    T res = DEFAULT;
    int low = 0, high = (int) n - 1;
    while (low <= high) {
      const int mid = (low + high) >> 1;
      if (query(mid) >= pos + 1) {
        res = mid;
        high = mid - 1;
      } else {
        low = mid + 1;
      }
    }
    return res;
  }
};]]></text>
    <description>Fenwick Tree</description>
  </snippet>
  <snippet>
    <tag>phi</tag>
    <text><![CDATA[template <typename T>
inline T phi(T n) {
  T ans = n;
  n >>= __builtin_ctzll(n);
  if (ans != n) {
    ans >>= 1;
  }
  for (T i = 3; i * i <= n; i += 2) {
    if (n % i == 0) {
      ans -= ans / i;
      while (n % i == 0) {
        n /= i;
      }
    }
  }
  if (n > 2) {
    ans -= ans / n;
  }
  return ans;
}

inline vector<int> phi_all(const int n) {
  vector<int> phi(n + 1);
  iota(phi.begin(), phi.end(), 0);
  for (int i = 2; i <= n; i++) {
    if (phi[i] == i) {
      for (int j = i; j <= n; j += i) {
        phi[j] -= phi[j] / i;
      }
    }
  }
  return phi;
}]]></text>
    <description>Euler's Totient Function</description>
  </snippet>
  <snippet>
    <tag>sieve</tag>
    <text><![CDATA[template <typename T>
inline bool is_prime(const T n) {
  if (n < 9) {
    return n == 2 || n == 3 || n == 5 || n == 7;
  }
  if ((n & 1) == 0) {
    return false;
  }
  for (T i = 3; i * i <= n; i += 2) {
    if (n % i == 0) {
      return false;
    }
  }
  return true;
}

inline vector<int> sieve(const int n) {
  vector<bool> prime(n + 1, true);
  for (int i = 4; i <= n; i += 2) {
    prime[i] = false;
  }
  for (int i = 3; i * i <= n; i += 2) {
    if (prime[i]) {
      for (int j = i * i; j <= n; j += i) {
        prime[j] = false;
      }
    }
  }
  vector<int> res;
  for (int i = 2; i <= n; i++) {
    if (prime[i]) {
      res.push_back(i);
    }
  }
  return res;
}]]></text>
    <description>Prime Sieve</description>
  </snippet>
  <snippet>
    <tag>factorize</tag>
    <text><![CDATA[template <typename T>
inline vector<T> factorize(T n) {
  vector<T> res(__builtin_ctzll(n), 2);
  n >>= res.size();
  for (T i = 3; i * i <= n; i += 2) {
    while (n % i == 0) {
      n /= i;
      res.push_back(i);
    }
  }
  if (n > 2) {
    res.push_back(n);
  }
  return res;
}

class factorizer {

private:

  const int MAXN;

  vector<int> spf;

public:

  inline factorizer(const int _n) : MAXN(_n), spf(_n + 1) {
    iota(spf.begin(), spf.end(), 0);
    for (int i = 4; i <= MAXN; i += 2) {
      spf[i] = 2;
    }
    for (int i = 3; i * i <= MAXN; i += 2) {
      if (spf[i] == i) {
        for (int j = i * i; j <= MAXN; j += i) {
          if (spf[j] == j) {
            spf[j] = i;
          }
        }
      }
    }
  }

  inline vector<int> factorize(int n) const {
    assert(0 < n && n <= MAXN);
    vector<int> res;
    while (n > 1) {
      res.push_back(spf[n]);
      n /= spf[n];
    }
    return res;
  }
};]]></text>
    <description>Prime Factorization</description>
  </snippet>
  <snippet>
    <tag>segtree</tag>
    <text><![CDATA[template <typename T>
class segment_tree {

private:

  const size_t n;
  const function<T(const T, const T)> unite;
  const T DEFAULT;

  vector<T> tree, lazy;

  template <typename A>
  inline void build(const vector<A> &a, const int v, const int l, const int r) {
    if (l == r) {
      tree[v] = static_cast<T>(a[l]);
      return;
    }
    const int array_mid = (l + r) >> 1;
    const int tree_left = v << 1 | 1, tree_right = tree_left + 1;
    build(a, tree_left, l, array_mid);
    build(a, tree_right, array_mid + 1, r);
    tree[v] = unite(tree[tree_left], tree[tree_right]);
  }

  inline void propagate(const int v, const int from, const int to) {
    if (lazy[v] != 0) {
      tree[v] += lazy[v] * (to - from + 1);
      if (from != to) {
        const int tree_left = v << 1 | 1, tree_right = tree_left + 1;
        lazy[tree_left] += lazy[v];
        lazy[tree_right] += lazy[v];
      }
      lazy[v] = 0;
    }
  }

  inline void update(const int v, const int from, const int to, const int l, const int r, const T delta) {
    propagate(v, from, to);
    if (to < l || r < from || to < from) {
      return;
    }
    const int tree_left = v << 1 | 1, tree_right = tree_left + 1;
    if (l <= from && to <= r) {
      tree[v] += delta * (to - from + 1);
      if (from != to) {
        lazy[tree_left] += delta;
        lazy[tree_right] += delta;
      }
      return;
    }
    const int coverage_mid = (from + to) >> 1;
    update(tree_left, from, coverage_mid, l, r, delta);
    update(tree_right, coverage_mid + 1, to, l, r, delta);
    tree[v] = unite(tree[tree_left], tree[tree_right]);
  }

  inline T query(const int v, const int from, const int to, const int l, const int r) {
    propagate(v, from, to);
    if (to < l || r < from || to < from) {
      return DEFAULT;
    }
    if (l <= from && to <= r) {
      return tree[v];
    }
    const int coverage_mid = (from + to) >> 1;
    const int tree_left = v << 1 | 1, tree_right = tree_left + 1;
    const T left_query = query(tree_left, from, coverage_mid, l, r);
    const T right_query = query(tree_right, coverage_mid + 1, to, l, r);
    return unite(left_query, right_query);
  }

public:

  inline segment_tree(const size_t _n,
                      const function<T(const T, const T)> &_unite = plus<T>(),
                      const T _default = 0) : n(_n),
                                              unite(_unite),
                                              DEFAULT(_default),
                                              tree(_n << 2, _default),
                                              lazy(_n << 2, _default) {}

  template <typename A>
  inline segment_tree(const vector<A> &a,
                      const function<T(const T, const T)> &_unite = plus<T>(),
                      const T _default = 0) : segment_tree(a.size(), _unite, _default) {
    build(a, 0, 0, (int) n - 1);
  }

  inline size_t size() const {
    return n;
  }

  inline void update(const int l, const int r, const T delta) {
    update(0, 0, (int) n - 1, l, r, delta);
  }

  inline T query(const int l, const int r) {
    return query(0, 0, (int) n - 1, l, r);
  }
};]]></text>
    <description>Segment Tree</description>
  </snippet>
  <snippet>
    <tag>sparse</tag>
    <text><![CDATA[template <typename T>
class sparse_table {

private:

  const size_t n;
  const function<T(const T, const T)> unite;
  const T DEFAULT;

  vector<T> a;
  vector<vector<T>> st_a, st_b;

public:

  template <typename A>
  inline sparse_table(const vector<A> &_a,
                      const function<T(const T, const T)> &_unite = plus<T>(),
                      const T _default = 0) : n(_a.size()),
                                              unite(_unite),
                                              DEFAULT(_default),
                                              a(_a.begin(), _a.end()),
                                              st_a(32 - __builtin_clz(n)),
                                              st_b(st_a.size()) {
    for (int i = 0; i < (int) st_a.size(); i++) {
      const int ones = (1 << i) - 1;
      T now = DEFAULT;
      st_a[i].resize(n, DEFAULT);
      for (int j = 0; j < (int) n; j++) {
        now = st_a[i][j] = unite(now, a[j]);
        if ((j & ones) == ones) {
          now = DEFAULT;
        }
      }
      now = DEFAULT;
      st_b[i].resize(n, DEFAULT);
      for (int j = (int) n - 1; j >= 0; j--) {
        now = st_b[i][j] = unite(now, a[j]);
        if ((j & ones) == 0) {
          now = DEFAULT;
        }
      }
    }
  }

  inline size_t size() const {
    return n;
  }

  inline T query(const int from, const int to) const {
    if (from == to) {
      return unite(a[from], DEFAULT);
    }
    const int lg = 32 - __builtin_clz(from ^ to) - 1;
    return unite(st_b[lg][from], st_a[lg][to]);
  }
};]]></text>
    <description>Sparse Table</description>
  </snippet>
  <snippet>
    <tag>trie</tag>
    <text><![CDATA[class trie {

private:

  const int K;

  struct vertex {

    int leaf, count;
    vector<int> next;

    inline vertex(const int _K) : leaf(0), count(0), next(_K, -1) {}
  };

  vector<vertex> t;

  inline int get_pos(const char c) const {
    // modify if required
    return tolower(c) - 'a';
  }

public:

  inline trie(const int _K = 26) : K(_K), t(1, vertex(_K)) {}

  inline void insert(const string &s) {
    int v = 0;
    for (const char c : s) {
      const int i = get_pos(c);
      if (t[v].next[i] == -1) {
        t[v].next[i] = (int) t.size();
        t.emplace_back(K);
      }
      t[v].count++;
      v = t[v].next[i];
    }
    t[v].count++;
    t[v].leaf++;
  }

  inline bool find(const string &s, const bool is_prefix = true) const {
    int v = 0;
    for (const char c : s) {
      const int i = get_pos(c);
      if (t[v].next[i] == -1) {
        return false;
      }
      v = t[v].next[i];
    }
    return (is_prefix ? t[v].count : t[v].leaf) > 0;
  }

  inline void erase(const string &s) {
    if (!find(s, false)) {
      return;
    }
    int v = 0;
    for (const char c : s) {
      const int i = get_pos(c);
      t[v].count--;
      v = t[v].next[i];
    }
    t[v].count--;
    t[v].leaf--;
  }

  inline bool empty() const {
    return t[0].count == 0;
  }

  inline size_t size() const {
    return (size_t) t[0].count;
  }

  inline size_t alphabet_size() const {
    return (size_t) K;
  }
};]]></text>
    <description>Trie</description>
  </snippet>
  <snippet>
    <tag>lca</tag>
    <text><![CDATA[class tree_lca {

private:

  const int max_height;

  int time_elapsed;
  vector<int> in_time, out_time, subtree_size;
  vector<vector<int>> parent;
  vector<vector<int64_t>> dist;

  inline tree_lca(const int n) : max_height((int) ceil(log2(n))),
                                 time_elapsed(0), in_time(n),
                                 out_time(n), subtree_size(n),
                                 parent(n, vector<int>(1 + max_height)),
                                 dist(n, vector<int64_t>(1 + max_height)) {}

  template <typename A, typename B>
  inline void dfs(const vector<vector<pair<A, B>>> &g, const int u, const int p) {
    in_time[u] = ++time_elapsed;
    parent[u][0] = p;
    subtree_size[u] = 1;
    for (int i = 1; i <= max_height; i++) {
      parent[u][i] = parent[parent[u][i - 1]][i - 1];
      dist[u][i] = dist[u][i - 1] + dist[parent[u][i - 1]][i - 1];
    }
    for (const auto &[v, w] : g[u]) {
      if (v == p) {
        continue;
      }
      dist[v][0] = static_cast<int64_t>(w);
      dfs(g, v, u);
      subtree_size[u] += subtree_size[v];
    }
    out_time[u] = ++time_elapsed;
  }

public:

  template <typename A>
  inline tree_lca(const vector<vector<A>> &_g, const int root = 0)
                  : tree_lca((int) _g.size()) {
    vector<vector<pair<int, int>>> g(_g.size());
    for (int u = 0; u < (int) g.size(); u++) {
      for (const A v : _g[u]) {
        g[u].emplace_back(static_cast<int>(v), 1);
      }
    }
    dfs(g, root, root);
  }

  template <typename A, typename B>
  inline tree_lca(const vector<vector<pair<A, B>>> &_g, const int root = 0)
                  : tree_lca((int) _g.size()) {
    dfs(_g, root, root);
  }

  inline bool is_ancestor(const int u, const int v) const {
    return (in_time[u] <= in_time[v] && out_time[u] >= out_time[v]);
  }

  inline int lca(int u, const int v) const {
    if (is_ancestor(u, v)) {
      return u;
    }
    if (is_ancestor(v, u)) {
      return v;
    }
    for (int i = max_height; i >= 0; i--) {
      if (!is_ancestor(parent[u][i], v)) {
        u = parent[u][i];
      }
    }
    return parent[u][0];
  }

  inline int64_t distance(const int u, const int v) const {
    return (dist[u][max_height] + dist[v][max_height]
            - (dist[lca(u, v)][max_height] << 1));
  }

  inline int kth_ancestor(int u, int k) const {
    for (int i = 0; k > 0; i++, k >>= 1) {
      if ((k & 1) == 1) {
        u = parent[u][i];
      }
    }
    return u;
  }

  inline int size(const int u) const {
    return subtree_size[u];
  }
};]]></text>
    <description>Lowest Common Ancestor</description>
  </snippet>
  <snippet>
    <tag>cuts</tag>
    <text><![CDATA[class cut_points_edges {

private:

  int time_elapsed;
  vector<bool> visited;
  vector<int> in_time, min_time;

  inline cut_points_edges(const int n) : time_elapsed(0), visited(n),
                                         in_time(n), min_time(n) {}

  template <typename A>
  inline void dfs(const vector<vector<A>> &g, const int u, const int p) {
    visited[u] = true;
    in_time[u] = min_time[u] = ++time_elapsed;
    int children = 0;
    for (const A vertex : g[u]) {
      const int v = static_cast<int>(vertex);
      if (v == p) {
        continue;
      }
      if (visited[v]) {
        min_time[u] = min(min_time[u], in_time[v]);
      } else {
        children++;
        dfs(g, v, u);
        min_time[u] = min(min_time[u], min_time[v]);
        if (in_time[u] <= min_time[v]) {
          if (p != -1) {
            cut_points.push_back(u);
          }
          if (in_time[u] < min_time[v]) {
            bridges.emplace_back(u, v);
            if (u > v) {
              swap(bridges.back().first, bridges.back().second);
            }
          }
        }
      }
    }
    if (p == -1 && children > 1) {
      cut_points.push_back(u);
    }
  }

  template <typename A>
  inline void clean(vector<A> &container) const {
    container.clear();
    container.shrink_to_fit();
  }

public:

  vector<int> cut_points;
  vector<pair<int, int>> bridges;

  template <typename A>
  inline cut_points_edges(const vector<vector<A>> &g,
                          const bool keep_sorted = false)
                          : cut_points_edges((int) g.size()) {
    for (int u = 0; u < (int) g.size(); u++) {
      if (!visited[u]) {
        dfs(g, u, -1);
      }
    }
    if (keep_sorted) {
      sort(cut_points.begin(), cut_points.end());
      sort(bridges.begin(), bridges.end());
    }

    clean(visited);
    clean(in_time);
    clean(min_time);
  }

  template <typename A, typename B>
  inline cut_points_edges(const vector<vector<pair<A, B>>> &_g,
                          const bool keep_sorted = false) {
    vector<vector<int>> g(_g.size());
    for (int u = 0; u < (int) g.size(); u++) {
      for (const auto &[v, _] : _g[u]) {
        g[u].push_back(static_cast<int>(v));
      }
    }
    *this = cut_points_edges(g, keep_sorted);
  }
};]]></text>
    <description>Articulation Points and Bridges</description>
  </snippet>
  <snippet>
    <tag>scc</tag>
    <text><![CDATA[class scc {

private:

  vector<bool> visited;
  vector<int> component;

  inline scc(const int n) : visited(n), comp_id(n, -1), g_rev(n) {}

  template <typename A>
  inline void dfs(const vector<vector<A>> &g, const int u) {
    visited[u] = true;
    for (const A vertex : g[u]) {
      const int v = static_cast<int>(vertex);
      if (!visited[v]) {
        dfs(g, v);
      }
    }
    component.push_back(u);
  }

  template <typename A>
  inline void clean(vector<A> &container) const {
    container.clear();
    container.shrink_to_fit();
  }

public:

  vector<int> comp_id;
  vector<vector<int>> g_rev, g_condensed;

  template <typename A>
  inline scc(const vector<vector<A>> &g) : scc((int) g.size()) {
    for (int u = 0; u < (int) g.size(); u++) {
      if (!visited[u]) {
        dfs(g, u);
      }
      for (const A v : g[u]) {
        g_rev[static_cast<int>(v)].push_back(u);
      }
    }
    visited.assign(g.size(), false);
    const vector<int> order(component.rbegin(), component.rend());
    for (const int i : order) {
      if (!visited[i]) {
        component.clear();
        dfs(g_rev, i);
        const int cur_id = (int) g_condensed.size();
        for (const int u : component) {
          comp_id[u] = cur_id;
          for (const int v : g_rev[u]) {
            if (comp_id[v] != cur_id && comp_id[v] != -1) {
              g_condensed[comp_id[v]].push_back(cur_id);
            }
          }
        }
        g_condensed.emplace_back();
      }
    }

    clean(visited);
    clean(component);
  }

  template <typename A, typename B>
  inline scc(const vector<vector<pair<A, B>>> &_g) {
    vector<vector<int>> g(_g.size());
    for (int u = 0; u < (int) g.size(); u++) {
      for (const auto &[v, _] : _g[u]) {
        g[u].push_back(static_cast<int>(v));
      }
    }
    *this = scc(g);
  }
};]]></text>
    <description>SCC and Condensation Graph</description>
  </snippet>
  <snippet>
    <tag>kmp</tag>
    <text><![CDATA[template <typename T>
inline vector<int> kmp_table(const int n, const T &s) {
  vector<int> lps(n);
  for (int i = 1, j = 0; i < n; i++) {
    while (j > 0 && s[i] != s[j]) {
      j = lps[j - 1];
    }
    if (s[i] == s[j]) {
      j++;
    }
    lps[i] = j;
  }
  return lps;
}

template <typename T>
inline vector<int> kmp_table(const T &s) {
  return kmp_table((int) s.size(), s);
}

template <typename T>
inline vector<int> kmp_search(const int n, const T &source, const int m, const T &search, const vector<int> &lps) {
  assert(m > 0 && (int) lps.size() == m);
  vector<int> occurrences;
  for (int i = 0, j = 0; i < n; i++) {
    while (j > 0 && (j == m || source[i] != search[j])) {
      j = lps[j - 1];
    }
    if (source[i] == search[j]) {
      j++;
    }
    if (j == m) {
      occurrences.push_back(i - m + 1);
    }
  }
  return occurrences;
}

template <typename T>
inline vector<int> kmp_search(const int n, const T &source, const int m, const T &search) {
  return kmp_search(n, source, m, search, kmp_table(m, search));
}

template <typename T>
inline vector<int> kmp_search(const T &source, const T &search, const vector<int> &lps) {
  return kmp_search((int) source.size(), source, (int) search.size(), search, lps);
}

template <typename T>
inline vector<int> kmp_search(const T &source, const T &search) {
  return kmp_search((int) source.size(), source, (int) search.size(), search, kmp_table(search));
}]]></text>
    <description>Knuth Morris Pratt</description>
  </snippet>
  <snippet>
    <tag>pbds</tag>
    <text><![CDATA[#include <ext/pb_ds/assoc_container.hpp>

using namespace __gnu_pbds;

template <typename T, typename C = less<T>>
using indexed_set = tree<T, null_type, C, rb_tree_tag, tree_order_statistics_node_update>;

template <typename K, typename V, typename C = less<K>>
using indexed_map = tree<K, V, C, rb_tree_tag, tree_order_statistics_node_update>;]]></text>
    <description>GNU PBDS</description>
  </snippet>
</snippets>
